buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

apply plugin: 'docker'

group = 'ia.nazarov.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	implementation 'com.apptastic:rssreader:2.2.2'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testCompile "org.mockito:mockito-core:2.+"
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task buildDocker(type: Docker, dependsOn: build) {
	baseImage "openjdk:11.0.7-slim"
	//dryRun = true // Just to produce Dockerfile
	//stageDir = file("${buildDir}/docker_stage/${jar.baseName}-${version}")
	tagVersion = project.version.toString().toLowerCase().replace('+', '_')
	applicationName = "${jar.baseName}".toLowerCase()
	addFile("${buildDir}/libs/${jar.baseName}-${version}.jar", "/app/app.jar")
	addFile("${buildDir}/resources/main/application.yml", "/app/config/application.yml")
	addFile("${buildDir}/resources/main/schema.sql", "/app/config/schema.sql")

	addInstruction("CMD", "cd /app && java \$JAVA_OPTS -jar ./app.jar")
	exposePort(8080)
}